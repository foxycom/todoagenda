apply plugin: 'com.android.application'

// Load Jacoco Only if needed
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco build file: jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}

// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/carvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests) {
    if (project.hasProperty('testName')) {
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""

        carvedTestSrcDir = "src/carvedTest/${testName}"

        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }
        }
    }

    useLibrary 'android.test.mock'

    defaultConfig {
        versionCode 691
        versionName '4.4.0'
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        testApplicationId "org.andstatus.todoagenda.tests"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "TodoAgenda-$versionName".toString()

        buildConfigField "String", "ORG_TASKS_AUTHORITY", "\"org.tasks\""
    }

    buildTypes {
        release {
            minifyEnabled false
            lintOptions {
                warning 'MissingTranslation','InvalidPackage'
            }
        }
        debug {
            testCoverageEnabled jacocoEnabled.toBoolean()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    if (project.hasProperty('todoagendaStoreFile')) {
        signingConfigs {
            releaseConfig {
                storeFile file(todoagendaStoreFile)
                storePassword todoagendaStorePassword
                keyAlias todoagendaKeyAlias
                keyPassword todoagendaKeyPassword
            }
        }
        buildTypes.release.signingConfig signingConfigs.releaseConfig
    }
    // See https://www.timroes.de/2013/09/22/handling-signing-configs-with-gradle/
    if (project.hasProperty("todoagenda.signing")
            && new File(project.property("todoagenda.signing").toString() + ".gradle").exists()) {
        apply from: project.property("todoagenda.signing") + ".gradle";
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        animationsDisabled true

        unitTests.all {

            // Nices output on the console/logs
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }

            jacoco {
                includeNoLocationClasses = true
            }

            test {
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if (carvedTests) {
                    // Just use the same?
                    reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                }
            }
        }
    }
}

dependencies {
    implementation "joda-time:joda-time:$jodaTimeVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation project(':colorpicker')

    testImplementation 'org.robolectric:robolectric:4.2'
    // testImplementation 'org.robolectric:robolectric:4.1'
    // testImplementation 'de.unipassau.abc:test-utils:1.0-SNAPSHOT'
    // testImplementation 'com.google.guava:guava:27.0.1-jre'
    testImplementation 'org.mockito:mockito-core:2.6.3'
    // androidTestCompile 'org.mockito:mockito-android:2.6.3'

    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:core:$testRunnerVersion"
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$testRulesVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCoreVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
}